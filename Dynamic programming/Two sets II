#include <bits/stdc++.h>
using namespace std;
#define MAXN 5001
#define s second
#define f first
#define lli long long int
#define pb push_back
typedef vector<lli> vi;
#define lp(i, n)    for(int i = 0; i<n; i++)
#define INF 200000000
#define mod 1000000007
/*
    first test if the sum is odd. If the sum is odd, then it is impossible to create two sets of the same value ( parity + same parity  = even)
    make a dp of [largest_value_used][set_sum]
    for each new i value, the base is the reaching the set sum without that element
    the new transition is adding that value to a set before adding it which reaches current j target
*/
int main()
{
   int n;
   cin>>n;
   int sum = n *(n+1)/2;
   if(sum&1) {
    cout<<0<<endl;
    return 0;
   }
   int target = sum/2;
   vector<vector<int>> dp(n+1, vector<int> (target+1, 0));
   dp[0][0] =1;
   for(int i = 1; i<=n; i++){
      for(int j = 1; j<= target; j++){
            dp[i][j] = dp[i-1][j];
            int remain = j - i;
            if(remain>=0) dp[i][j]  = (dp[i][j] + dp[i-1][remain])%mod;
      }
   }
   cout<<dp[n][target]<<endl;
}
