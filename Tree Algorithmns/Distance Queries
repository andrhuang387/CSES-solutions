#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 200005
#define INF 1000000000000000009
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
typedef vector<lli> vi;
/*
    normal lca  + depth
    depth  = depth (a) + dpeth(b) - 2*depth(lca(a,b))
*/
int n,q;
vector<int> adj[MAXN];
int tin[MAXN] ,tout[MAXN];
int timer = 0;
const int ms = ceil(log2(MAXN));
int up[ms][MAXN];
int depth[MAXN];
void dfs(int v, int p, int dep)
{
    tin[v] = ++timer;
    up[0][v] = p;
    depth[v] = dep;
    loop(i, 1, ms-1)up[i][v]  = up[i-1][up[i-1][v]];
    for(auto c: adj[v]){
        if(c == p ) continue;
        dfs(c, v, dep  +1);
    }
    tout[v] = ++timer;
}
bool ancestor(int a, int b)
{
    return tin[a]<= tin[b] && tout[a] >= tout[b];
}
int lca(int a, int b)
{
    if(ancestor(a,b))return a;
    if(ancestor(b,a)) return b;
    for(int i = ms - 1; i>=0;i--){
        if(!ancestor(up[i][a], b)) a = up[i][a];
    }
    return up[0][a];
}
int main()
{
   cin>>n>>q;
   lp(i, n-1){
    int a,b;
    cin>>a>>b;
    adj[a].pb(b);
    adj[b].pb(a);
   }
   dfs(1,1, 1);
   lp(i,q){
      int a,b;
      cin>>a>>b;
      cout<<depth[a]  + depth[b] - 2*depth[lca(a,b)]<<endl;
   }
}
