#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 200005
#define INF 1000000000000000009
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
typedef vector<lli> vi;
/*
    Euler Tour + segment Tree
    Flatten to get 2n array of in and out. store each in and out time on map of pairs
    for each query, use segment tree to get answer. only path from node to segment do not have return ,so positive values
    need 2*(2*n) segment tree, which is around 8*10^5 = 1<<20
*/
#define in first
#define out second
//make 1 indexed
lli seg_tree[1<<20];
lli val[MAXN];
vector<int> adj[MAXN];
int timer = 0;
map<int,pair<int,int>> nodemp;
void dfs(int v, int p)
{
    nodemp[v].in = ++timer;
    for(auto c : adj[v]){
        if (c ==  p) continue;
        dfs(c, v);
    }
    nodemp[v].out = ++timer;
}
void upd(int k ,lli x)
{
    k+= (1<<19);
    seg_tree[k] = x;
    while(k>1){
        k/=2;
        seg_tree[k] = seg_tree[2*k]  +seg_tree[2*k  +1];
    }
}
lli qry(int lo, int hi)
{
    lo += (1<<19), hi += (1<<19);
    lli ret = 0;
    while(lo<= hi){
        if(lo&1) ret += seg_tree[lo++];
        if(~hi&1) ret += seg_tree[hi--];
        lo/=2, hi/=2;
    }
    return ret;
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
   int n, q;
   cin>>n>>q;
   loop(i,1,n){
      cin>>val[i];
   }
   lp(i, n-1){
      int a,b;
      cin>>a>>b;
      adj[a].pb(b);
      adj[b].pb(a);
   }
   dfs(1,1);
   loop(i, 1, n){
      upd( nodemp[i].in, val[i]);
      upd(nodemp[i].out, -val[i]);
   }
   lp(i,q)
   {
       int w;
       cin>>w;
       if(w ==1) {
        lli s,x;
        cin>>s>>x;
        upd(nodemp[s].in, x);
        upd(nodemp[s].out, -x);
       }
       else if( w== 2){
        int s;
        cin>>s;
        cout<<qry(1, nodemp[s].in)<<endl;
       }
   }
    return 0;
}
