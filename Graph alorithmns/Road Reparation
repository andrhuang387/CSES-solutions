#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 200005
#define INF 1000000005
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define print(a) cout<<a<<" "
#define printl(a) cout<<a<<endl;
#define debug cout<<"I am here"<<endl;
typedef vector<lli> vi;
/*
     kruskals. Compare edges then for all edges, see if join diferent component and join. Print result
*/
lli link[MAXN], len[MAXN];
vector<tuple<int,int,int>>edges;
int n,m;
int find(int a){
    while(a!=link[a]) a=link[a];
    return a;
}
void join(int a, int b){
    if (find(a)==find(b)) return;
    int x = find(a), y = find(b);
    if (len[x]>len[y]) swap(x,y);
    len[y]+=len[x];
    link[x] = y;
}
int main()
{
    cin>>n>>m;
    lp(i,m){
       int w,a,b;
       cin>>a>>b>>w;
       edges.pb({w, a,b});
    }
    sort(edges.begin(), edges.end());
    loop(i,1,n){link[i]=i; len[i]=1;}
    lli cost = 0;
    for (auto [w,a,b]:edges){
        if (find(a)==find(b)) continue;
        cost+=w;
        join(a,b);
    }
    int count = 0;
    loop(i, 1,n){
        if(link[i] == i) count++;
    }
    if(count != 1) {printl("IMPOSSIBLE");}
    else printl(cost);
}
