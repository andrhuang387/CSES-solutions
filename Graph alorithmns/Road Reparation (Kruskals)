#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 200005
#define INF 1000000005
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define print(a) cout<<a<<" "
#define printl(a) cout<<a<<endl;
#define debug cout<<"I am here"<<endl;
typedef vector<lli> vi;
/*
     kruskals. Compare edges then for all edges, see if join diferent component and join. Print result
*/
vector<tuple<int,int,int>> edge;
lli link[MAXN], len[MAXN];
int find(int a)
{
    while(link[a] != a) a = link[a];
    return a;
}
void join(int a,int b)
{
    int x = find(a), y = find(b);
    if(x > y ) swap(x,y); //small to large
    link[x] = y;
    len[y]  += len[x];

}
int main()
{
    int n,m;
    cin>>n>>m;
    lp(i,m){
       int a,b,w;
       cin>>a>>b>>w;
       edge.pb({w,a,b});
    }
    sort(edge.begin(), edge.end());
    loop(i,1,n){
       link[i] = i;
       len[i]  =1;
    }
    lli cost = 0;
    for(auto [w,a,b]: edge){
        if(find(a) == find(b))continue;
        cost += w;
        join(a,b);
    }
    int ct  = 0;
    loop(i,1,n) if(link[i] == i) ct++;
    if(ct == 1) {
        cout<<cost<<endl;
    }
    else printl("IMPOSSIBLE");
}
