#include<bits/stdc++.h>
using namespace std;
#define MAXN 100001
#define s second
#define f first
#define lli long long int
#define pi pair<lli, lli>
#define pb push_back
#define lp(i, n)    for(lli i = 0; i<n; i++)
#define loop(i,n) for(lli i = 1; i<=n; i++)
#define INF 10000000000000001
#define mod  10000
#define vvi vector<vector<int>>
///
/*
   Make 1 adj going forward and another going backward
   lemma: if node 1 leads to all and all leads to 1. Then we say a path from any two nodes is posisble
   find if there is a value that node 1 doesnt have. If it doesnt work then fail ,if no goes to 1 fail
   if both work print yes
*/
bool vis[MAXN];
vector<int> adj[MAXN][2];
void dfs(int a, int b)//, vector<vector<bool>>& vis)
{
    vis[a] = true;
    for(auto it: adj[a][b]){
        if(!vis[it])dfs(it ,b);
    }
}
int main()
{
   int n, m;
   cin>>n>>m;
   lp(i, m){
    int a,b;
    cin>>a>>b;
    adj[a][0].pb(b);
    adj[b][1].pb(a);
   }
   dfs(1,0);
   loop(i,n){
      if(!vis[i]){
        cout<<"NO"<<endl;
        cout<<1<< " " <<i;
        return 0;
      }
   }
   memset(vis, false, sizeof(vis));
   dfs(1, 1);
   loop(i,n){
      if(!vis[i]){
        cout<<"NO"<<endl;
        cout<<i<< " " <<1;
        return 0;
      }
   }
   cout<<"YES"<<endl;
   return 0;
}
