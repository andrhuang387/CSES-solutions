#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 200005
#define INF 1000000005
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
#define rev(a) reverse(a.begin(), a.end())
#define print(a) cout<<a<<" "
#define printl(a) cout<<a<<endl;
typedef vector<lli> vi;
/*
     since each teleport to other, this is a functional graph, or sucessor graph. Meaning each node has one outdegree
     1. calculate binary jumping
     2. find components and their distance from cycle source
     3. three cases
         a. x in front of y and when jumping can get to y by teleporters, then dist is x  -y
         b. x after y and can get to y by heading to source and from source to y. Then distance if x  + (source - y)
         c. not same tree or on same tree but cant get to other: then impossible to get to it
*/
#define MAXK 1000000005
const int ms = ceil(log2(MAXK));
int succ[ms][MAXN];
bool vis[MAXN];
int len[MAXN];
void dfs(int v)
{
    vis[v] = true;
    if(!vis[succ[0][v]]) dfs(succ[0][v]);
    len[v] = len[succ[0][v]]  +1;
}
int jmp(int v, int d)
{
    if(d<= 0) return v;
    lp(i, ms){
       if(d & (1<<i)) v = succ[i][v];
    }
    return v;
}
int main()
{
    int n,q;
    cin>>n>>q;
    loop(i,1, n){
       int x;
       cin>>x;
       succ[0][i] = x;
    }
    loop(i, 1, ms - 1){
       loop(j, 1, n){
           succ[i][j] = succ[i-1][succ[i-1][j]];
       }
    }
    loop(i ,1,n)
    {
        if(!vis[i])dfs(i);
    }
    lp(i,q){
      int a,b;
      cin>>a>>b;
      ///if a is after b
      int source  = jmp(a, len[a]);
      if(jmp(a, len[a] - len[b]) == b ) {
            printl(len[a] - len[b]);
      }
      else if(jmp(source, len[source] - len[b]) == b) {
            printl(len[source] - len[b]  +len[a]);
      }
      //if not same tree
      else printl(-1);
    }
}
