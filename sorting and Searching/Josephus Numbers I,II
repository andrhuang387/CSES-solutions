#include <bits/stdc++.h>
using namespace std;
#define lp(i, n)    for(int i = 0; i<n; i++)
#define pb push_back
#define s second
#define f first
#define lli long long int
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
void faster()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
}
/*
   ave an ordered set. that way you dont need iterators and can find by order. then loop n-- and continue. use if(n) to change new index because when n = 0 mod doesnt work and it isnt needed
*/
int main() {
    faster();
    int n, k;
    cin>>n>>k;
    ordered_set os;
    lp(i, n)os.insert(i+1);
    int ind = k%n;
    while(n--){
        auto it = os.find_by_order(ind);
        cout<<*it<< " ";
        os.erase(it);
        if(n) ind = (ind%n + k)%n;
    }
}
