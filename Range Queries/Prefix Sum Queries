#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 1001
#define INF 1000000000000000009
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
typedef vector<lli> vi;

/*
    im stupid, i did not understand what a prefix sum query was
    I thought it was asking for the largest subarray sum, but it asking for largest subarray sum starting from left index
    so segment tree must have 1. sum, and 2. subarray sum
*/
#define lsum first
#define sum second
vector<pair<lli, lli>> seg_tree((1<<19), {0,0});
lli qry(lli lo, lli hi)
{
    lo += (1<<18), hi += (1<<18);
    pair<lli,lli> x = {0, 0} , y = {0,0};
    while(lo <= hi){
        if(lo&1) x = {max(x.lsum, x.sum + seg_tree[lo].lsum), x.sum + seg_tree[lo].sum}, lo++;
        if(~hi&1) y = {max(seg_tree[hi].lsum, seg_tree[hi].sum  + y.lsum), y.sum + seg_tree[hi].sum}, hi--;
        hi/=2, lo/=2;
    }
    return max(x.lsum, x.sum + y.lsum);
}
void upd(lli k, lli x)
{
    k+= (1<<18);
    seg_tree[k] = {x,x};
    while(k>1){
        k/=2;
        seg_tree[k].sum = seg_tree[2*k].sum + seg_tree[2*k +1].sum;
        seg_tree[k].lsum = max(seg_tree[2*k].lsum, seg_tree[2*k].sum + seg_tree[2*k+1].lsum);
    }
}
int main() {
    int n, q;
    cin>>n>>q;
    lp(i,n){
        lli x;
        cin>>x;
        upd(i, x);
    }
    lp(i,q){
       lli a,b,c;
       cin>>a>>b>>c;
       if(a ==1) {
        upd(b-1, c);
       }
       else{
        cout<<qry(b-1, c-1)<<endl;
       }
    }
}
