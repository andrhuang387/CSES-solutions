#include <bits/stdc++.h>
using namespace std;
#define lli long long int
#define f first
#define s second
#define pb push_back
#define MAXN 1001
#define INF 1000000000000000009
#define mod 1000000007
#define loop(i,a,b) for  (int i=(a); i<= (signed)(b); i++)
#define lp(i,a) for(int i = 0;i<(signed)(a); i++)
typedef vector<lli> vi;

/*
    2D BIT tree
    same idea as a normal 1d BIT tree, except it is generalized to a higher dimension, updated in both directions
*/
int bit[MAXN][MAXN],  a[MAXN][MAXN];
int n, q;
///return least significant bit
int lsb(int x)
{
    return x & (-x);
}
void upd(int y, int x ,int val)
{
    while(x<= n){
        int yt = y;
        while(yt <= n){
            bit[yt][x] += val;
            yt += lsb(yt);
        }
        x+= lsb(x);
    }
}
int qry(int y, int x)
{
    int ret  = 0;
    while(x>0){
        int yt = y;
        while (yt>0){
            ret = ret  + bit[yt][x];
            yt -= lsb(yt);
        }
        x-= lsb(x);
    }
    return ret;
}
int main() {
    //create bit and fill grid
    cin>>n>>q;
    loop(i,1,n){
      string s;
      cin>>s;
      loop(j,1, n){
        if(s[j-1] == '*')upd(i,j, 1);
        a[i][j] = ((s[j-1] == '*')?1:0);
      }
    }
    lp(i, q){
       int w;
       cin>>w;
       //find current state and reverse. If remove tree, do -1 because 1 + (-1) = 0
       if( w == 1){
         int y,x;
         cin>>y>>x;
         int val = 0;
         if(a[y][x] == 1) a[y][x] =0, val = -1;
         else if(a[y][x] == 0) a[y][x] = 1, val = 1;
         upd(y, x, val);
       }
       ///find prefix sum of each point
       if( w == 2){
        int yo, xo, yt, xt;
        cin>>yo>>xo>>yt>>xt;
        cout<<qry(yt, xt) - qry(yt, xo -1) - qry(yo -1, xt) + qry(yo -1 ,xo -1)<<endl;
       }
    }
}
